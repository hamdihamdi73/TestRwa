{
  "address": "0x00647Bd477c577185DD1B791198167784C244647",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sukukBondAddress",
          "type": "address"
        }
      ],
      "name": "SukukBondCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "compliance",
          "type": "address"
        }
      ],
      "name": "createSukukBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x15a8dca71e758163456593f915897a1f7bd447c5f159e12cc6099547edaf3bc5",
  "receipt": {
    "to": null,
    "from": "0x29549757C5597c529efCD2F8d0732F81c2fD1A1D",
    "contractAddress": "0x00647Bd477c577185DD1B791198167784C244647",
    "transactionIndex": 85,
    "gasUsed": "2842831",
    "logsBloom": "0x
    "blockHash": "0xb11e602d8cd174ee2c8698680a9e33082f6d6e9f1e8a1e602f0fbdf3e72667c1",
    "transactionHash": "0x15a8dca71e758163456593f915897a1f7bd447c5f159e12cc6099547edaf3bc5",
    "logs": [],
    "blockNumber": 6383165,
    "cumulativeGasUsed": "20646577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db8f13ed83bbd81bfe16242db6ee00c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sukukBondAddress\",\"type\":\"address\"}],\"name\":\"SukukBondCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"compliance\",\"type\":\"address\"}],\"name\":\"createSukukBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TREXFactory.sol\":\"TREXFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract IdentityRegistry {\\r\\n    struct Identity {\\r\\n        address onchainID;\\r\\n        uint256 nationality;\\r\\n        uint256 country;\\r\\n    }\\r\\n\\r\\n    mapping(address => Identity) public identities;\\r\\n\\r\\n    function addIdentity(address _user, address _onchainID, uint256 _nationality, uint256 _country) public {\\r\\n        identities[_user] = Identity(_onchainID, _nationality, _country);\\r\\n    }\\r\\n\\r\\n    function getIdentity(address _user) public view returns (Identity memory) {\\r\\n        return identities[_user];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3c94fb3d5f3668393c0c62a078bf7c13a019360fda684a9a6dc283d2c9dc2160\",\"license\":\"MIT\"},\"contracts/ModularCompliance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IdentityRegistry.sol\\\";\\r\\n\\r\\ncontract ModularCompliance {\\r\\n    IdentityRegistry identityRegistry;\\r\\n\\r\\n    constructor(address _identityRegistry) {\\r\\n        identityRegistry = IdentityRegistry(_identityRegistry);\\r\\n    }\\r\\n\\r\\n    function isCompliant(address _user, uint256 _requiredNationality, uint256 _requiredCountry) public view returns (bool) {\\r\\n        IdentityRegistry.Identity memory identity = identityRegistry.getIdentity(_user);\\r\\n        return identity.nationality == _requiredNationality && identity.country == _requiredCountry;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8c6177067422cea7e7c8a1841393b438e4ce11cf5c0a1021b952ca3b0ec5865d\",\"license\":\"MIT\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract Roles is AccessControl {\\r\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\r\\n    bytes32 public constant CUSTODIAN_ROLE = keccak256(\\\"CUSTODIAN_ROLE\\\");\\r\\n    bytes32 public constant ISSUER_ROLE = keccak256(\\\"ISSUER_ROLE\\\");\\r\\n    bytes32 public constant INVESTOR_ROLE = keccak256(\\\"INVESTOR_ROLE\\\");\\r\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\r\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\r\\n    bytes32 public constant CHARIAA_COMPLIANCE_ROLE = keccak256(\\\"CHARIAA_COMPLIANCE_ROLE\\\");\\r\\n\\r\\n    constructor() {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(MASTER_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function addRole(address account, bytes32 role) public onlyRole(MASTER_ROLE) {\\r\\n        grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    function removeRole(address account, bytes32 role) public onlyRole(MASTER_ROLE) {\\r\\n        revokeRole(role, account);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8ff124c41f532390ecfa10617af2175cee3063945eda8d7e554dc37a8687a410\",\"license\":\"MIT\"},\"contracts/SukukBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./ModularCompliance.sol\\\";\\r\\n\\r\\ncontract SukukBond is ERC1155, Ownable, AccessControl {\\r\\n    struct BondDetails {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint256 totalSupply;\\r\\n        uint256 couponPeriod;\\r\\n        uint256 maturity;\\r\\n        string currency;\\r\\n        string esgLabel;\\r\\n        string category;\\r\\n        address onchainID;\\r\\n    }\\r\\n\\r\\n    bytes32 public constant ISSUER_ROLE = keccak256(\\\"ISSUER_ROLE\\\");\\r\\n    bytes32 public constant MASTER_ROLE = keccak256(\\\"MASTER_ROLE\\\");\\r\\n\\r\\n    mapping(uint256 => BondDetails) public bondDetails;\\r\\n    ModularCompliance public compliance;\\r\\n\\r\\n    event UpdatedTokenInformation(\\r\\n        uint256 indexed id,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        uint256 totalSupply,\\r\\n        uint256 couponPeriod,\\r\\n        uint256 maturity,\\r\\n        string currency,\\r\\n        string esgLabel,\\r\\n        string category,\\r\\n        address onchainID\\r\\n    );\\r\\n    event IdentityRegistryAdded(address indexed identityRegistry);\\r\\n    event ComplianceAdded(address indexed compliance);\\r\\n\\r\\n    constructor(string memory uri, address _compliance) ERC1155(uri) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(ISSUER_ROLE, msg.sender);\\r\\n        _setupRole(MASTER_ROLE, msg.sender);\\r\\n        compliance = ModularCompliance(_compliance);\\r\\n        emit ComplianceAdded(_compliance);\\r\\n    }\\r\\n\\r\\n    function createBond(\\r\\n        uint256 id,\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 totalSupply,\\r\\n        uint256 couponPeriod,\\r\\n        uint256 maturity,\\r\\n        string memory currency,\\r\\n        string memory esgLabel,\\r\\n        string memory category,\\r\\n        address onchainID,\\r\\n        bytes memory data\\r\\n    ) public onlyRole(ISSUER_ROLE) {\\r\\n        bondDetails[id] = BondDetails(\\r\\n            name,\\r\\n            symbol,\\r\\n            totalSupply,\\r\\n            couponPeriod,\\r\\n            maturity,\\r\\n            currency,\\r\\n            esgLabel,\\r\\n            category,\\r\\n            onchainID\\r\\n        );\\r\\n        _mint(msg.sender, id, totalSupply, data);\\r\\n        emit UpdatedTokenInformation(\\r\\n            id,\\r\\n            name,\\r\\n            symbol,\\r\\n            totalSupply,\\r\\n            couponPeriod,\\r\\n            maturity,\\r\\n            currency,\\r\\n            esgLabel,\\r\\n            category,\\r\\n            onchainID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getBondDetails(uint256 id) public view returns (BondDetails memory) {\\r\\n        return bondDetails[id];\\r\\n    }\\r\\n\\r\\n    function addAttributes(uint256 id, string memory newCategory) public onlyRole(MASTER_ROLE) {\\r\\n        bondDetails[id].category = newCategory;\\r\\n    }\\r\\n\\r\\n    function transferBond(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        uint256 requiredNationality,\\r\\n        uint256 requiredCountry\\r\\n    ) public {\\r\\n        require(compliance.isCompliant(to, requiredNationality, requiredCountry), \\\"Compliance check failed\\\");\\r\\n        safeTransferFrom(msg.sender, to, id, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function setURI(string memory newuri) public onlyOwner {\\r\\n        _setURI(newuri);\\r\\n    }\\r\\n\\r\\n    // Override supportsInterface\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xeaaeef6c9c1c4082b61835205d38ffc1468acf339ed1fb424e0d896017ed2a3b\",\"license\":\"MIT\"},\"contracts/TREXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SukukBond.sol\\\";\\r\\n\\r\\ncontract TREXFactory {\\r\\n    event SukukBondCreated(address sukukBondAddress);\\r\\n\\r\\n    function createSukukBond(string memory uri, address compliance) public returns (address) {\\r\\n        SukukBond sukukBond = new SukukBond(uri, compliance);\\r\\n        emit SukukBondCreated(address(sukukBond));\\r\\n        return address(sukukBond);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdc51b56458b9e57be864a5a413d69f494eccd0d96881682e5121bafeb88125e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613275806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806330685c0614610030575b600080fd5b61004361003e36600461011d565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100de565b61007b9291906101df565b604051809103906000f080158015610097573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f0610911870c3e0baf4f4e3235058d4b1fd095e6a43a8e2d3161910d76a0c57619060200160405180910390a19392505050565b6130008061024083390190565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461011857600080fd5b919050565b6000806040838503121561013057600080fd5b823567ffffffffffffffff8082111561014857600080fd5b818501915085601f83011261015c57600080fd5b81358181111561016e5761016e6100eb565b604051601f8201601f19908116603f01168101908382118183101715610196576101966100eb565b816040528281528860208487010111156101af57600080fd5b8260208601602083013760006020848301015280965050505050506101d660208401610101565b90509250929050565b604081526000835180604084015260005b8181101561020d57602081870181015160608684010152016101f0565b50600060608285018101919091526001600160a01b03949094166020840152601f01601f19169091019091019291505056fe60806040523480156200001157600080fd5b506040516200300038038062003000833981016040819052620000349162000244565b81620000408162000100565b506200004c3362000112565b6200005960003362000164565b620000857f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa1223362000164565b620000b17f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c3362000164565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b690600090a2505062000487565b60026200010e8282620003bb565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008281526004602090815260408083206001600160a01b03851684529091529020546200010e908390839060ff166200010e5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001cd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023f57600080fd5b919050565b600080604083850312156200025857600080fd5b82516001600160401b03808211156200027057600080fd5b818501915085601f8301126200028557600080fd5b8151818111156200029a576200029a62000211565b604051601f8201601f19908116603f01168101908382118183101715620002c557620002c562000211565b81604052828152602093508884848701011115620002e257600080fd5b600091505b82821015620003065784820184015181830185015290830190620002e7565b60008484830101528096505050506200032181860162000227565b925050509250929050565b600181811c908216806200034157607f821691505b6020821081036200036257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b657600081815260208120601f850160051c81016020861015620003915750805b601f850160051c820191505b81811015620003b2578281556001016200039d565b5050505b505050565b81516001600160401b03811115620003d757620003d762000211565b620003ef81620003e884546200032c565b8462000368565b602080601f8311600181146200042757600084156200040e5750858301515b600019600386901b1c1916600185901b178555620003b2565b600085815260208120601f198616915b82811015620004585788860151825594840194600190910190840162000437565b5085821015620004775787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612b6980620004976000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80636290865d116100de578063a22cb46511610097578063dc22486311610071578063dc224863146103b9578063e985e9c5146103e0578063f242432a1461041c578063f2fde38b1461042f57600080fd5b8063a22cb4651461036b578063b1770b371461037e578063d547741f146103a657600080fd5b80636290865d146102e5578063715018a61461031057806382aefa24146103185780638da5cb5b1461033f57806391d1485414610350578063a217fddf1461036357600080fd5b8063187c0d091161014b5780632eb2c2d6116101255780632eb2c2d61461028c5780632f2ff15d1461029f57806336568abe146102b25780634e1273f4146102c557600080fd5b8063187c0d09146102435780631a8e467f14610256578063248a9ca31461026957600080fd5b8062fdd58e1461019257806301ffc9a7146101b857806302fe5305146101db5780630436f2f6146101f05780630d9ce9b7146102105780630e89341c14610223575b600080fd5b6101a56101a0366004611dc2565b610442565b6040519081526020015b60405180910390f35b6101cb6101c6366004611e02565b6104db565b60405190151581526020016101af565b6101ee6101e9366004611ed4565b6104e6565b005b6102036101fe366004611f10565b6104fa565b6040516101af9190611f79565b6101ee61021e366004612055565b61087e565b610236610231366004611f10565b610969565b6040516101af9190612097565b6101ee6102513660046120aa565b6109fd565b6101ee6102643660046120f0565b610a48565b6101a5610277366004611f10565b60009081526004602052604090206001015490565b6101ee61029a3660046122bd565b610be2565b6101ee6102ad366004612366565b610c27565b6101ee6102c0366004612366565b610c51565b6102d86102d3366004612392565b610ccf565b6040516101af919061248d565b6006546102f8906001600160a01b031681565b6040516001600160a01b0390911681526020016101af565b6101ee610df8565b6101a57f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b6003546001600160a01b03166102f8565b6101cb61035e366004612366565b610e0c565b6101a5600081565b6101ee6103793660046124ae565b610e37565b61039161038c366004611f10565b610e42565b6040516101af999897969594939291906124e5565b6101ee6103b4366004612366565b611139565b6101a57f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6101cb6103ee36600461257b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101ee61042a3660046125a5565b61115e565b6101ee61043d366004612609565b6111a3565b60006001600160a01b0383166104b25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006104d582611219565b6104ee61123e565b6104f781611298565b50565b610552604051806101200160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b600082815260056020526040908190208151610120810190925280548290829061057b90612624565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790612624565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050815260200160018201805461060d90612624565b80601f016020809104026020016040519081016040528092919081815260200182805461063990612624565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180546106bd90612624565b80601f01602080910402602001604051908101604052809291908181526020018280546106e990612624565b80156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b5050505050815260200160068201805461074f90612624565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90612624565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b505050505081526020016007820180546107e190612624565b80601f016020809104026020016040519081016040528092919081815260200182805461080d90612624565b801561085a5780601f1061082f5761010080835404028352916020019161085a565b820191906000526020600020905b81548152906001019060200180831161083d57829003601f168201915b5050509183525050600891909101546001600160a01b031660209091015292915050565b60065460405163af7d696d60e01b81526001600160a01b03878116600483015260248201859052604482018490529091169063af7d696d90606401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa919061265e565b6109465760405162461bcd60e51b815260206004820152601760248201527f436f6d706c69616e636520636865636b206661696c656400000000000000000060448201526064016104a9565b610962338686866040518060200160405280600081525061115e565b5050505050565b60606002805461097890612624565b80601f01602080910402602001604051908101604052809291908181526020018280546109a490612624565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505050509050919050565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c610a27816112a4565b6000838152600560205260409020600701610a4283826126c1565b50505050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa122610a72816112a4565b6040518061012001604052808c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815250600560008e81526020019081526020016000206000820151816000019081610ae391906126c1565b5060208201516001820190610af890826126c1565b5060408201516002820155606082015160038201556080820151600482015560a08201516005820190610b2b90826126c1565b5060c08201516006820190610b4090826126c1565b5060e08201516007820190610b5590826126c1565b506101009190910151600890910180546001600160a01b0319166001600160a01b03909216919091179055610b8c338d8b856112ae565b8b7fafd1e807b390d77ef14273b70b6fd8ad200a2658aca930bc7ff74ffeb4f943f38c8c8c8c8c8c8c8c8c604051610bcc999897969594939291906124e5565b60405180910390a2505050505050505050505050565b6001600160a01b038516331480610bfe5750610bfe85336103ee565b610c1a5760405162461bcd60e51b81526004016104a990612780565b61096285858585856113c2565b600082815260046020526040902060010154610c42816112a4565b610c4c838361159f565b505050565b6001600160a01b0381163314610cc15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104a9565b610ccb8282611625565b5050565b60608151835114610d345760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104a9565b600083516001600160401b03811115610d4f57610d4f611e1f565b604051908082528060200260200182016040528015610d78578160200160208202803683370190505b50905060005b8451811015610df057610dc3858281518110610d9c57610d9c6127ce565b6020026020010151858381518110610db657610db66127ce565b6020026020010151610442565b828281518110610dd557610dd56127ce565b6020908102919091010152610de9816127fa565b9050610d7e565b509392505050565b610e0061123e565b610e0a600061168c565b565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610ccb3383836116de565b600560205260009081526040902080548190610e5d90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8990612624565b8015610ed65780601f10610eab57610100808354040283529160200191610ed6565b820191906000526020600020905b815481529060010190602001808311610eb957829003601f168201915b505050505090806001018054610eeb90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1790612624565b8015610f645780601f10610f3957610100808354040283529160200191610f64565b820191906000526020600020905b815481529060010190602001808311610f4757829003601f168201915b505050505090806002015490806003015490806004015490806005018054610f8b90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb790612624565b80156110045780601f10610fd957610100808354040283529160200191611004565b820191906000526020600020905b815481529060010190602001808311610fe757829003601f168201915b50505050509080600601805461101990612624565b80601f016020809104026020016040519081016040528092919081815260200182805461104590612624565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b5050505050908060070180546110a790612624565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390612624565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b505050600890930154919250506001600160a01b031689565b600082815260046020526040902060010154611154816112a4565b610c4c8383611625565b6001600160a01b03851633148061117a575061117a85336103ee565b6111965760405162461bcd60e51b81526004016104a990612780565b61096285858585856117be565b6111ab61123e565b6001600160a01b0381166112105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a9565b6104f78161168c565b60006001600160e01b03198216637965db0b60e01b14806104d557506104d5826118e8565b6003546001600160a01b03163314610e0a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a9565b6002610ccb82826126c1565b6104f78133611938565b6001600160a01b03841661130e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016104a9565b33600061131a85611991565b9050600061132785611991565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611359908490612813565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113b9836000898989896119dc565b50505050505050565b81518351146114245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a9565b6001600160a01b03841661144a5760405162461bcd60e51b81526004016104a990612826565b3360005b845181101561153157600085828151811061146b5761146b6127ce565b602002602001015190506000858381518110611489576114896127ce565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156114d95760405162461bcd60e51b81526004016104a99061286b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611516908490612813565b925050819055505050508061152a906127fa565b905061144e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115819291906128b5565b60405180910390a4611597818787878787611b37565b505050505050565b6115a98282610e0c565b610ccb5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115e13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61162f8282610e0c565b15610ccb5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036117515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104a9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166117e45760405162461bcd60e51b81526004016104a990612826565b3360006117f085611991565b905060006117fd85611991565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156118405760405162461bcd60e51b81526004016104a99061286b565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061187d908490612813565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118dd848a8a8a8a8a6119dc565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061191957506001600160e01b031982166303a24d0760e21b145b806104d557506301ffc9a760e01b6001600160e01b03198316146104d5565b6119428282610e0c565b610ccb5761194f81611bf2565b61195a836020611c04565b60405160200161196b9291906128e3565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401612097565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119cb576119cb6127ce565b602090810291909101015292915050565b6001600160a01b0384163b156115975760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a209089908990889088908890600401612958565b6020604051808303816000875af1925050508015611a5b575060408051601f3d908101601f19168201909252611a589181019061299d565b60015b611b0757611a676129ba565b806308c379a003611aa05750611a7b6129d6565b80611a865750611aa2565b8060405162461bcd60e51b81526004016104a99190612097565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104a9565b6001600160e01b0319811663f23a6e6160e01b146113b95760405162461bcd60e51b81526004016104a990612a5f565b6001600160a01b0384163b156115975760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b7b9089908990889088908890600401612aa7565b6020604051808303816000875af1925050508015611bb6575060408051601f3d908101601f19168201909252611bb39181019061299d565b60015b611bc257611a676129ba565b6001600160e01b0319811663bc197c8160e01b146113b95760405162461bcd60e51b81526004016104a990612a5f565b60606104d56001600160a01b03831660145b60606000611c13836002612b05565b611c1e906002612813565b6001600160401b03811115611c3557611c35611e1f565b6040519080825280601f01601f191660200182016040528015611c5f576020820181803683370190505b509050600360fc1b81600081518110611c7a57611c7a6127ce565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ca957611ca96127ce565b60200101906001600160f81b031916908160001a9053506000611ccd846002612b05565b611cd8906001612813565b90505b6001811115611d50576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d0c57611d0c6127ce565b1a60f81b828281518110611d2257611d226127ce565b60200101906001600160f81b031916908160001a90535060049490941c93611d4981612b1c565b9050611cdb565b508315611d9f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a9565b9392505050565b80356001600160a01b0381168114611dbd57600080fd5b919050565b60008060408385031215611dd557600080fd5b611dde83611da6565b946020939093013593505050565b6001600160e01b0319811681146104f757600080fd5b600060208284031215611e1457600080fd5b8135611d9f81611dec565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611e5a57611e5a611e1f565b6040525050565b600082601f830112611e7257600080fd5b81356001600160401b03811115611e8b57611e8b611e1f565b604051611ea2601f8301601f191660200182611e35565b818152846020838601011115611eb757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ee657600080fd5b81356001600160401b03811115611efc57600080fd5b611f0884828501611e61565b949350505050565b600060208284031215611f2257600080fd5b5035919050565b60005b83811015611f44578181015183820152602001611f2c565b50506000910152565b60008151808452611f65816020860160208601611f29565b601f01601f19169290920160200192915050565b6020815260008251610120806020850152611f98610140850183611f4d565b91506020850151601f1980868503016040870152611fb68483611f4d565b93506040870151606087015260608701516080870152608087015160a087015260a08701519150808685030160c0870152611ff18483611f4d565b935060c08701519150808685030160e087015261200e8483611f4d565b935060e0870151915061010081878603018188015261202d8584611f4d565b9450808801519250505061204b828601826001600160a01b03169052565b5090949350505050565b600080600080600060a0868803121561206d57600080fd5b61207686611da6565b97602087013597506040870135966060810135965060800135945092505050565b602081526000611d9f6020830184611f4d565b600080604083850312156120bd57600080fd5b8235915060208301356001600160401b038111156120da57600080fd5b6120e685828601611e61565b9150509250929050565b60008060008060008060008060008060006101608c8e03121561211257600080fd5b8b359a506001600160401b038060208e0135111561212f57600080fd5b61213f8e60208f01358f01611e61565b9a508060408e0135111561215257600080fd5b6121628e60408f01358f01611e61565b995060608d0135985060808d0135975060a08d013596508060c08e0135111561218a57600080fd5b61219a8e60c08f01358f01611e61565b95508060e08e013511156121ad57600080fd5b6121bd8e60e08f01358f01611e61565b9450806101008e013511156121d157600080fd5b6121e28e6101008f01358f01611e61565b93506121f16101208e01611da6565b9250806101408e0135111561220557600080fd5b506122178d6101408e01358e01611e61565b90509295989b509295989b9093969950565b60006001600160401b0382111561224257612242611e1f565b5060051b60200190565b600082601f83011261225d57600080fd5b8135602061226a82612229565b6040516122778282611e35565b83815260059390931b850182019282810191508684111561229757600080fd5b8286015b848110156122b2578035835291830191830161229b565b509695505050505050565b600080600080600060a086880312156122d557600080fd5b6122de86611da6565b94506122ec60208701611da6565b935060408601356001600160401b038082111561230857600080fd5b61231489838a0161224c565b9450606088013591508082111561232a57600080fd5b61233689838a0161224c565b9350608088013591508082111561234c57600080fd5b5061235988828901611e61565b9150509295509295909350565b6000806040838503121561237957600080fd5b8235915061238960208401611da6565b90509250929050565b600080604083850312156123a557600080fd5b82356001600160401b03808211156123bc57600080fd5b818501915085601f8301126123d057600080fd5b813560206123dd82612229565b6040516123ea8282611e35565b83815260059390931b850182019282810191508984111561240a57600080fd5b948201945b8386101561242f5761242086611da6565b8252948201949082019061240f565b9650508601359250508082111561244557600080fd5b506120e68582860161224c565b600081518084526020808501945080840160005b8381101561248257815187529582019590820190600101612466565b509495945050505050565b602081526000611d9f6020830184612452565b80151581146104f757600080fd5b600080604083850312156124c157600080fd5b6124ca83611da6565b915060208301356124da816124a0565b809150509250929050565b60006101208083526124f98184018d611f4d565b9050828103602084015261250d818c611f4d565b905089604084015288606084015287608084015282810360a08401526125338188611f4d565b905082810360c08401526125478187611f4d565b905082810360e084015261255b8186611f4d565b91505060018060a01b0383166101008301529a9950505050505050505050565b6000806040838503121561258e57600080fd5b61259783611da6565b915061238960208401611da6565b600080600080600060a086880312156125bd57600080fd5b6125c686611da6565b94506125d460208701611da6565b9350604086013592506060860135915060808601356001600160401b038111156125fd57600080fd5b61235988828901611e61565b60006020828403121561261b57600080fd5b611d9f82611da6565b600181811c9082168061263857607f821691505b60208210810361265857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561267057600080fd5b8151611d9f816124a0565b601f821115610c4c57600081815260208120601f850160051c810160208610156126a25750805b601f850160051c820191505b81811015611597578281556001016126ae565b81516001600160401b038111156126da576126da611e1f565b6126ee816126e88454612624565b8461267b565b602080601f831160018114612723576000841561270b5750858301515b600019600386901b1c1916600185901b178555611597565b600085815260208120601f198616915b8281101561275257888601518255948401946001909101908401612733565b50858210156127705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161280c5761280c6127e4565b5060010190565b808201808211156104d5576104d56127e4565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006128c86040830185612452565b82810360208401526128da8185612452565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161291b816017850160208801611f29565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161294c816028840160208801611f29565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061299290830184611f4d565b979650505050505050565b6000602082840312156129af57600080fd5b8151611d9f81611dec565b600060033d11156129d35760046000803e5060005160e01c5b90565b600060443d10156129e45790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a1357505050505090565b8285019150815181811115612a2b5750505050505090565b843d8701016020828501011115612a455750505050505090565b612a5460208286010187611e35565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612ad390830186612452565b8281036060840152612ae58186612452565b90508281036080840152612af98185611f4d565b98975050505050505050565b80820281158282048414176104d5576104d56127e4565b600081612b2b57612b2b6127e4565b50600019019056fea26469706673582212206db7ddb523227b95f56dc56420ccbec50e72fcb56d3981be1112e66684f365eb64736f6c63430008110033a26469706673582212203a8f19de803343b1b9f3eb0e2d22e332bd25d68e963e016d6c8a8b0054ba7a3164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806330685c0614610030575b600080fd5b61004361003e36600461011d565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808383604051610070906100de565b61007b9291906101df565b604051809103906000f080158015610097573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f0610911870c3e0baf4f4e3235058d4b1fd095e6a43a8e2d3161910d76a0c57619060200160405180910390a19392505050565b6130008061024083390190565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461011857600080fd5b919050565b6000806040838503121561013057600080fd5b823567ffffffffffffffff8082111561014857600080fd5b818501915085601f83011261015c57600080fd5b81358181111561016e5761016e6100eb565b604051601f8201601f19908116603f01168101908382118183101715610196576101966100eb565b816040528281528860208487010111156101af57600080fd5b8260208601602083013760006020848301015280965050505050506101d660208401610101565b90509250929050565b604081526000835180604084015260005b8181101561020d57602081870181015160608684010152016101f0565b50600060608285018101919091526001600160a01b03949094166020840152601f01601f19169091019091019291505056fe60806040523480156200001157600080fd5b506040516200300038038062003000833981016040819052620000349162000244565b81620000408162000100565b506200004c3362000112565b6200005960003362000164565b620000857f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa1223362000164565b620000b17f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c3362000164565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f7f3a888862559648ec01d97deb7b5012bff86dc91e654a1de397170db40e35b690600090a2505062000487565b60026200010e8282620003bb565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008281526004602090815260408083206001600160a01b03851684529091529020546200010e908390839060ff166200010e5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001cd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023f57600080fd5b919050565b600080604083850312156200025857600080fd5b82516001600160401b03808211156200027057600080fd5b818501915085601f8301126200028557600080fd5b8151818111156200029a576200029a62000211565b604051601f8201601f19908116603f01168101908382118183101715620002c557620002c562000211565b81604052828152602093508884848701011115620002e257600080fd5b600091505b82821015620003065784820184015181830185015290830190620002e7565b60008484830101528096505050506200032181860162000227565b925050509250929050565b600181811c908216806200034157607f821691505b6020821081036200036257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b657600081815260208120601f850160051c81016020861015620003915750805b601f850160051c820191505b81811015620003b2578281556001016200039d565b5050505b505050565b81516001600160401b03811115620003d757620003d762000211565b620003ef81620003e884546200032c565b8462000368565b602080601f8311600181146200042757600084156200040e5750858301515b600019600386901b1c1916600185901b178555620003b2565b600085815260208120601f198616915b82811015620004585788860151825594840194600190910190840162000437565b5085821015620004775787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612b6980620004976000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80636290865d116100de578063a22cb46511610097578063dc22486311610071578063dc224863146103b9578063e985e9c5146103e0578063f242432a1461041c578063f2fde38b1461042f57600080fd5b8063a22cb4651461036b578063b1770b371461037e578063d547741f146103a657600080fd5b80636290865d146102e5578063715018a61461031057806382aefa24146103185780638da5cb5b1461033f57806391d1485414610350578063a217fddf1461036357600080fd5b8063187c0d091161014b5780632eb2c2d6116101255780632eb2c2d61461028c5780632f2ff15d1461029f57806336568abe146102b25780634e1273f4146102c557600080fd5b8063187c0d09146102435780631a8e467f14610256578063248a9ca31461026957600080fd5b8062fdd58e1461019257806301ffc9a7146101b857806302fe5305146101db5780630436f2f6146101f05780630d9ce9b7146102105780630e89341c14610223575b600080fd5b6101a56101a0366004611dc2565b610442565b6040519081526020015b60405180910390f35b6101cb6101c6366004611e02565b6104db565b60405190151581526020016101af565b6101ee6101e9366004611ed4565b6104e6565b005b6102036101fe366004611f10565b6104fa565b6040516101af9190611f79565b6101ee61021e366004612055565b61087e565b610236610231366004611f10565b610969565b6040516101af9190612097565b6101ee6102513660046120aa565b6109fd565b6101ee6102643660046120f0565b610a48565b6101a5610277366004611f10565b60009081526004602052604090206001015490565b6101ee61029a3660046122bd565b610be2565b6101ee6102ad366004612366565b610c27565b6101ee6102c0366004612366565b610c51565b6102d86102d3366004612392565b610ccf565b6040516101af919061248d565b6006546102f8906001600160a01b031681565b6040516001600160a01b0390911681526020016101af565b6101ee610df8565b6101a57f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa12281565b6003546001600160a01b03166102f8565b6101cb61035e366004612366565b610e0c565b6101a5600081565b6101ee6103793660046124ae565b610e37565b61039161038c366004611f10565b610e42565b6040516101af999897969594939291906124e5565b6101ee6103b4366004612366565b611139565b6101a57f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c81565b6101cb6103ee36600461257b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101ee61042a3660046125a5565b61115e565b6101ee61043d366004612609565b6111a3565b60006001600160a01b0383166104b25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006104d582611219565b6104ee61123e565b6104f781611298565b50565b610552604051806101200160405280606081526020016060815260200160008152602001600081526020016000815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b600082815260056020526040908190208151610120810190925280548290829061057b90612624565b80601f01602080910402602001604051908101604052809291908181526020018280546105a790612624565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b5050505050815260200160018201805461060d90612624565b80601f016020809104026020016040519081016040528092919081815260200182805461063990612624565b80156106865780601f1061065b57610100808354040283529160200191610686565b820191906000526020600020905b81548152906001019060200180831161066957829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180546106bd90612624565b80601f01602080910402602001604051908101604052809291908181526020018280546106e990612624565b80156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b5050505050815260200160068201805461074f90612624565b80601f016020809104026020016040519081016040528092919081815260200182805461077b90612624565b80156107c85780601f1061079d576101008083540402835291602001916107c8565b820191906000526020600020905b8154815290600101906020018083116107ab57829003601f168201915b505050505081526020016007820180546107e190612624565b80601f016020809104026020016040519081016040528092919081815260200182805461080d90612624565b801561085a5780601f1061082f5761010080835404028352916020019161085a565b820191906000526020600020905b81548152906001019060200180831161083d57829003601f168201915b5050509183525050600891909101546001600160a01b031660209091015292915050565b60065460405163af7d696d60e01b81526001600160a01b03878116600483015260248201859052604482018490529091169063af7d696d90606401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa919061265e565b6109465760405162461bcd60e51b815260206004820152601760248201527f436f6d706c69616e636520636865636b206661696c656400000000000000000060448201526064016104a9565b610962338686866040518060200160405280600081525061115e565b5050505050565b60606002805461097890612624565b80601f01602080910402602001604051908101604052809291908181526020018280546109a490612624565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505050509050919050565b7f8b8c0776df2c2176edf6f82391c35ea4891146d7a976ee36fd07f1a6fb4ead4c610a27816112a4565b6000838152600560205260409020600701610a4283826126c1565b50505050565b7f114e74f6ea3bd819998f78687bfcb11b140da08e9b7d222fa9c1f1ba1f2aa122610a72816112a4565b6040518061012001604052808c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b0316815250600560008e81526020019081526020016000206000820151816000019081610ae391906126c1565b5060208201516001820190610af890826126c1565b5060408201516002820155606082015160038201556080820151600482015560a08201516005820190610b2b90826126c1565b5060c08201516006820190610b4090826126c1565b5060e08201516007820190610b5590826126c1565b506101009190910151600890910180546001600160a01b0319166001600160a01b03909216919091179055610b8c338d8b856112ae565b8b7fafd1e807b390d77ef14273b70b6fd8ad200a2658aca930bc7ff74ffeb4f943f38c8c8c8c8c8c8c8c8c604051610bcc999897969594939291906124e5565b60405180910390a2505050505050505050505050565b6001600160a01b038516331480610bfe5750610bfe85336103ee565b610c1a5760405162461bcd60e51b81526004016104a990612780565b61096285858585856113c2565b600082815260046020526040902060010154610c42816112a4565b610c4c838361159f565b505050565b6001600160a01b0381163314610cc15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104a9565b610ccb8282611625565b5050565b60608151835114610d345760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104a9565b600083516001600160401b03811115610d4f57610d4f611e1f565b604051908082528060200260200182016040528015610d78578160200160208202803683370190505b50905060005b8451811015610df057610dc3858281518110610d9c57610d9c6127ce565b6020026020010151858381518110610db657610db66127ce565b6020026020010151610442565b828281518110610dd557610dd56127ce565b6020908102919091010152610de9816127fa565b9050610d7e565b509392505050565b610e0061123e565b610e0a600061168c565b565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610ccb3383836116de565b600560205260009081526040902080548190610e5d90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8990612624565b8015610ed65780601f10610eab57610100808354040283529160200191610ed6565b820191906000526020600020905b815481529060010190602001808311610eb957829003601f168201915b505050505090806001018054610eeb90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1790612624565b8015610f645780601f10610f3957610100808354040283529160200191610f64565b820191906000526020600020905b815481529060010190602001808311610f4757829003601f168201915b505050505090806002015490806003015490806004015490806005018054610f8b90612624565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb790612624565b80156110045780601f10610fd957610100808354040283529160200191611004565b820191906000526020600020905b815481529060010190602001808311610fe757829003601f168201915b50505050509080600601805461101990612624565b80601f016020809104026020016040519081016040528092919081815260200182805461104590612624565b80156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b5050505050908060070180546110a790612624565b80601f01602080910402602001604051908101604052809291908181526020018280546110d390612624565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b505050600890930154919250506001600160a01b031689565b600082815260046020526040902060010154611154816112a4565b610c4c8383611625565b6001600160a01b03851633148061117a575061117a85336103ee565b6111965760405162461bcd60e51b81526004016104a990612780565b61096285858585856117be565b6111ab61123e565b6001600160a01b0381166112105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a9565b6104f78161168c565b60006001600160e01b03198216637965db0b60e01b14806104d557506104d5826118e8565b6003546001600160a01b03163314610e0a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a9565b6002610ccb82826126c1565b6104f78133611938565b6001600160a01b03841661130e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016104a9565b33600061131a85611991565b9050600061132785611991565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611359908490612813565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46113b9836000898989896119dc565b50505050505050565b81518351146114245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104a9565b6001600160a01b03841661144a5760405162461bcd60e51b81526004016104a990612826565b3360005b845181101561153157600085828151811061146b5761146b6127ce565b602002602001015190506000858381518110611489576114896127ce565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156114d95760405162461bcd60e51b81526004016104a99061286b565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611516908490612813565b925050819055505050508061152a906127fa565b905061144e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516115819291906128b5565b60405180910390a4611597818787878787611b37565b505050505050565b6115a98282610e0c565b610ccb5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115e13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61162f8282610e0c565b15610ccb5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036117515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104a9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166117e45760405162461bcd60e51b81526004016104a990612826565b3360006117f085611991565b905060006117fd85611991565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156118405760405162461bcd60e51b81526004016104a99061286b565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061187d908490612813565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118dd848a8a8a8a8a6119dc565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061191957506001600160e01b031982166303a24d0760e21b145b806104d557506301ffc9a760e01b6001600160e01b03198316146104d5565b6119428282610e0c565b610ccb5761194f81611bf2565b61195a836020611c04565b60405160200161196b9291906128e3565b60408051601f198184030181529082905262461bcd60e51b82526104a991600401612097565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106119cb576119cb6127ce565b602090810291909101015292915050565b6001600160a01b0384163b156115975760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a209089908990889088908890600401612958565b6020604051808303816000875af1925050508015611a5b575060408051601f3d908101601f19168201909252611a589181019061299d565b60015b611b0757611a676129ba565b806308c379a003611aa05750611a7b6129d6565b80611a865750611aa2565b8060405162461bcd60e51b81526004016104a99190612097565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104a9565b6001600160e01b0319811663f23a6e6160e01b146113b95760405162461bcd60e51b81526004016104a990612a5f565b6001600160a01b0384163b156115975760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611b7b9089908990889088908890600401612aa7565b6020604051808303816000875af1925050508015611bb6575060408051601f3d908101601f19168201909252611bb39181019061299d565b60015b611bc257611a676129ba565b6001600160e01b0319811663bc197c8160e01b146113b95760405162461bcd60e51b81526004016104a990612a5f565b60606104d56001600160a01b03831660145b60606000611c13836002612b05565b611c1e906002612813565b6001600160401b03811115611c3557611c35611e1f565b6040519080825280601f01601f191660200182016040528015611c5f576020820181803683370190505b509050600360fc1b81600081518110611c7a57611c7a6127ce565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611ca957611ca96127ce565b60200101906001600160f81b031916908160001a9053506000611ccd846002612b05565b611cd8906001612813565b90505b6001811115611d50576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d0c57611d0c6127ce565b1a60f81b828281518110611d2257611d226127ce565b60200101906001600160f81b031916908160001a90535060049490941c93611d4981612b1c565b9050611cdb565b508315611d9f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104a9565b9392505050565b80356001600160a01b0381168114611dbd57600080fd5b919050565b60008060408385031215611dd557600080fd5b611dde83611da6565b946020939093013593505050565b6001600160e01b0319811681146104f757600080fd5b600060208284031215611e1457600080fd5b8135611d9f81611dec565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611e5a57611e5a611e1f565b6040525050565b600082601f830112611e7257600080fd5b81356001600160401b03811115611e8b57611e8b611e1f565b604051611ea2601f8301601f191660200182611e35565b818152846020838601011115611eb757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611ee657600080fd5b81356001600160401b03811115611efc57600080fd5b611f0884828501611e61565b949350505050565b600060208284031215611f2257600080fd5b5035919050565b60005b83811015611f44578181015183820152602001611f2c565b50506000910152565b60008151808452611f65816020860160208601611f29565b601f01601f19169290920160200192915050565b6020815260008251610120806020850152611f98610140850183611f4d565b91506020850151601f1980868503016040870152611fb68483611f4d565b93506040870151606087015260608701516080870152608087015160a087015260a08701519150808685030160c0870152611ff18483611f4d565b935060c08701519150808685030160e087015261200e8483611f4d565b935060e0870151915061010081878603018188015261202d8584611f4d565b9450808801519250505061204b828601826001600160a01b03169052565b5090949350505050565b600080600080600060a0868803121561206d57600080fd5b61207686611da6565b97602087013597506040870135966060810135965060800135945092505050565b602081526000611d9f6020830184611f4d565b600080604083850312156120bd57600080fd5b8235915060208301356001600160401b038111156120da57600080fd5b6120e685828601611e61565b9150509250929050565b60008060008060008060008060008060006101608c8e03121561211257600080fd5b8b359a506001600160401b038060208e0135111561212f57600080fd5b61213f8e60208f01358f01611e61565b9a508060408e0135111561215257600080fd5b6121628e60408f01358f01611e61565b995060608d0135985060808d0135975060a08d013596508060c08e0135111561218a57600080fd5b61219a8e60c08f01358f01611e61565b95508060e08e013511156121ad57600080fd5b6121bd8e60e08f01358f01611e61565b9450806101008e013511156121d157600080fd5b6121e28e6101008f01358f01611e61565b93506121f16101208e01611da6565b9250806101408e0135111561220557600080fd5b506122178d6101408e01358e01611e61565b90509295989b509295989b9093969950565b60006001600160401b0382111561224257612242611e1f565b5060051b60200190565b600082601f83011261225d57600080fd5b8135602061226a82612229565b6040516122778282611e35565b83815260059390931b850182019282810191508684111561229757600080fd5b8286015b848110156122b2578035835291830191830161229b565b509695505050505050565b600080600080600060a086880312156122d557600080fd5b6122de86611da6565b94506122ec60208701611da6565b935060408601356001600160401b038082111561230857600080fd5b61231489838a0161224c565b9450606088013591508082111561232a57600080fd5b61233689838a0161224c565b9350608088013591508082111561234c57600080fd5b5061235988828901611e61565b9150509295509295909350565b6000806040838503121561237957600080fd5b8235915061238960208401611da6565b90509250929050565b600080604083850312156123a557600080fd5b82356001600160401b03808211156123bc57600080fd5b818501915085601f8301126123d057600080fd5b813560206123dd82612229565b6040516123ea8282611e35565b83815260059390931b850182019282810191508984111561240a57600080fd5b948201945b8386101561242f5761242086611da6565b8252948201949082019061240f565b9650508601359250508082111561244557600080fd5b506120e68582860161224c565b600081518084526020808501945080840160005b8381101561248257815187529582019590820190600101612466565b509495945050505050565b602081526000611d9f6020830184612452565b80151581146104f757600080fd5b600080604083850312156124c157600080fd5b6124ca83611da6565b915060208301356124da816124a0565b809150509250929050565b60006101208083526124f98184018d611f4d565b9050828103602084015261250d818c611f4d565b905089604084015288606084015287608084015282810360a08401526125338188611f4d565b905082810360c08401526125478187611f4d565b905082810360e084015261255b8186611f4d565b91505060018060a01b0383166101008301529a9950505050505050505050565b6000806040838503121561258e57600080fd5b61259783611da6565b915061238960208401611da6565b600080600080600060a086880312156125bd57600080fd5b6125c686611da6565b94506125d460208701611da6565b9350604086013592506060860135915060808601356001600160401b038111156125fd57600080fd5b61235988828901611e61565b60006020828403121561261b57600080fd5b611d9f82611da6565b600181811c9082168061263857607f821691505b60208210810361265857634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561267057600080fd5b8151611d9f816124a0565b601f821115610c4c57600081815260208120601f850160051c810160208610156126a25750805b601f850160051c820191505b81811015611597578281556001016126ae565b81516001600160401b038111156126da576126da611e1f565b6126ee816126e88454612624565b8461267b565b602080601f831160018114612723576000841561270b5750858301515b600019600386901b1c1916600185901b178555611597565b600085815260208120601f198616915b8281101561275257888601518255948401946001909101908401612733565b50858210156127705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161280c5761280c6127e4565b5060010190565b808201808211156104d5576104d56127e4565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006128c86040830185612452565b82810360208401526128da8185612452565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161291b816017850160208801611f29565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161294c816028840160208801611f29565b01602801949350505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061299290830184611f4d565b979650505050505050565b6000602082840312156129af57600080fd5b8151611d9f81611dec565b600060033d11156129d35760046000803e5060005160e01c5b90565b600060443d10156129e45790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a1357505050505090565b8285019150815181811115612a2b5750505050505090565b843d8701016020828501011115612a455750505050505090565b612a5460208286010187611e35565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090612ad390830186612452565b8281036060840152612ae58186612452565b90508281036080840152612af98185611f4d565b98975050505050505050565b80820281158282048414176104d5576104d56127e4565b600081612b2b57612b2b6127e4565b50600019019056fea26469706673582212206db7ddb523227b95f56dc56420ccbec50e72fcb56d3981be1112e66684f365eb64736f6c63430008110033a26469706673582212203a8f19de803343b1b9f3eb0e2d22e332bd25d68e963e016d6c8a8b0054ba7a3164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}